name: Deploy feature
on:
  workflow_call:
    inputs:
      production:
        required: false
        type: boolean
        default: false
        description: Skal være true hvis det skal deployes til produksjon
      nais_vars_file_name:
        required: true
        type: string
        default: feature
        description: Navnet på miljøvariabler filen som skal brukes ved deploy
    outputs:
      deploy_success:
        description: "Om deploy har gått gjennom OK"
        value: ${{ jobs.deploy.outputs.deploy_success }}
      image:
        description: "Docker Image navnet som blir deployet til miljø"
        value: ${{ jobs.publish_to_docker.outputs.image }}
      tag:
        description: "Docker tag som blir deployet til miljø"
        value: ${{ jobs.publish_to_docker.outputs.tag }}
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CLUSTER: ${{ inputs.production && 'prod-fss' || 'dev-fss' }}
  ENV_FILE_NAME: ${{ inputs.nais_vars_file_name }}

jobs:
  build:
    name: Bygg med maven
    runs-on: self-hosted
    steps:
      - run: sudo rm -rf *
      - uses: actions/checkout@v4
      - name: Bygg uten test
        if: ${{ inputs.production == false }}
        run: mvn install -Dmaven.test.skip=true -B -e -U
      - name: Bygg med test
        if: ${{ inputs.production == true }}
        run: mvn install -B -e -U
      - name: Rename jar file
        run: cp ./target/${{ github.event.repository.name }}-*.jar ./target/app.jar
      - uses: actions/upload-artifact@v3
        with:
          name: buildfiles
          path: ./target/app.jar
          retention-days: 1

  run-tests:
    name: Run tests
    if: ${{ inputs.production == false }}
    runs-on: self-hosted

    steps:
      - uses: actions/checkout@v4
      - run: mvn -B -e test

  publish_to_docker:
    name: Publish to docker
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v3
        with:
          name: buildfiles
      - uses: nais/docker-build-push@v0
        id: docker-push
        with:
          team: bidrag
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
    outputs:
      image: ${{ steps.docker-push.outputs.image }}
      tag: ${{ steps.docker-push.outputs.tag }}

  deploy:
    runs-on: ubuntu-latest
    name: Deploy ${{ inputs.nais_vars_file_name }}
    if: github.actor != 'dependabot[bot]'
    needs: publish_to_docker

    steps:
      - uses: actions/checkout@v4
        with:
          path: deploy
      - name: Deploy to ${{ env.CLUSTER }} with ${{ inputs.nais_vars_file_name }}.yaml
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          CLUSTER: ${{ env.CLUSTER }}
          RESOURCE: deploy/.nais/nais.yaml
          VARS: deploy/.nais/${{ inputs.nais_vars_file_name }}.yaml
          IMAGE: ${{ needs.publish_to_docker.outputs.image }}
      - id: generate_outputs
        run: echo "deploy_success=true" >> $GITHUB_OUTPUT
    outputs:
      deploy_success: ${{ steps.generate_outputs.outputs.deploy_success }}

  delete_artifacts:
      runs-on: ubuntu-latest
      name: Delete uploaded artifacts
      if: ${{ always() }}
      needs: deploy
      steps:
        - uses: geekyeggo/delete-artifact@v2
          with:
            name: buildfiles